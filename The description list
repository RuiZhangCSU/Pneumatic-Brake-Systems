SYSTEM pneumatic_brake {
       
INTERFACE {
/* Description of variables and constants */
      
    STATE {
        REAL P [100,700];
        BOOL u1_old, u2_old;
        }

    PARAMETER {
      REAL Ts    = 10e-3; 
      REAL R = 287; 
      REAL T = 293;
      REAL A1 = 4.2e-6; 
      REAL A2 = 2.5e-6; 
      REAL k = 1.4; 
      REAL V = 1.15e-3; 
      REAL Ps = 700; 
      REAL P0 = 100;
      REAL K1 = k*A1*sqrt(R*T)/V; 
      REAL K2 = -k*A2*sqrt(R*T)/V;
             }
	INPUT { BOOL u1, u2;
		}

    OUTPUT {
       BOOL u1_out, u2_out;
            }
    }

IMPLEMENTATION {
    AUX {
         REAL z1,z2,z3,z4,z5,z6,z7,z8,z9,z10, z;
         BOOL delta1_1, delta1_2, delta1_3, delta1_4;
         BOOL delta2_0, delta2_1, delta2_2, delta2_3;
         BOOL m1, m2;
         }

    AD { /* PWA linearization*/
         delta1_1 = P<=0.528*Ps;
         delta1_2 = P<=0.737*Ps;
         delta1_3 = P<=0.94*Ps;
         delta1_4 = P<=810;
         delta2_0 = P>=100;
         delta2_1 = P<=P0/0.528;
         delta2_2 = P<=P0/0.737;
         delta2_3 = P<=P0/0.94;
        }

    LINEAR {
             z = z1+z2+z3+z4+z5+z6+z7+z8+z9;
           }
    DA { 
         z1 = {IF u1 & ~u2 & delta2_0 & delta1_1 THEN K1*(0*P+0.4245*Ps)};
         z2 = {IF u1 & ~u2 & ~delta1_1 & delta1_2 THEN K1*(-0.1162*P+0.3968*Ps)};
         z3 = {IF u1 & ~u2 & ~delta1_2 & delta1_3 THEN K1*(-0.6554*P+0.7943*Ps)}; 
         z4 = {IF u1 & ~u2 & ~delta1_3 & delta1_4 THEN K1*(-2.9699*P+2.9699*Ps)};
         z5 = {IF u1 &  u2                THEN 0};
         z6 = {IF ~u1 & u2 & delta1_4 & ~delta2_1 THEN K2*(0*P0+0.4382*P)};
         z7 = {IF ~u1 & u2 & delta2_1 & ~delta2_2 THEN K2*(-0.0918*P0+0.2950*P)};
         z8 = {IF ~u1 & u2 & delta2_2 & ~delta2_3 THEN K2*(-0.4714*P0+0.5747*P)}; 
         z9 = {IF ~u1 & u2 & delta2_0 & delta2_3 THEN K2*(-2.1939*P0+2.1939*P)};
         z10 = {IF ~u1 & ~u2               THEN 0};                     
       }  
            
    CONTINUOUS {   P=P+Ts*(z);
                }
   AUTOMATA{
          u1_old = u1;
          u2_old = u2;
        }
   LOGIC{
        m1 = (~u1 & u1_old) | (u1 & ~u1_old);
        m2 = (~u2 & u2_old) | (u2 & ~u2_old);
        }

   OUTPUT{
          u1_out = m1;
          u2_out = m2;
        }
   MUST{
        P >= P0;
        P <= Ps;
       ~(u1_old & u2_old);
       }
}
}
 
